name: Sync Template Common

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - '.template-version'
      - '.github/actions/**'  # Prevents retriggering from self-commits
  
  schedule:
    - cron: '0 6 * * 0'  # Runs every Sunday at 6 AM UTC
  
  workflow_dispatch:

concurrency:
  group: sync-template-${{ github.run_attempt }}
  cancel-in-progress: false

jobs:
  sync_template:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Target Repository (cfa-repo-template-test Repo)
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}

      - name: Fetch Latest Template Updates (cfa-repo-template-common)
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          # Clone the parent repo into a temporary directory
          mkdir -p temp-clone
          git clone --depth=1 https://x-access-token:${{ secrets.PAT }}@github.com/cdcent/cfa-repo-template-common.git temp-clone

          # Check if a specific template version is pinned
          if [[ -f .template-version ]]; then
            TEMPLATE_VERSION=$(cat .template-version)
            if git -C temp-clone rev-parse --verify "$TEMPLATE_VERSION" >/dev/null 2>&1; then
              echo "Using pinned template version: $TEMPLATE_VERSION"
              git -C temp-clone checkout "$TEMPLATE_VERSION"
            else
              echo "Invalid template version found in .template-version: $TEMPLATE_VERSION"
              echo "Switching to the latest version instead."
            fi
          else
            echo "No pinned template version found. Using latest version."
          fi

          # Define files that should NEVER be overwritten
          EXCLUDED_FILES=("config.yaml" ".env" "custom-settings.json")
          RSYNC_EXCLUDES=""
          for FILE in "${EXCLUDED_FILES[@]}"; do
            RSYNC_EXCLUDES+="--exclude=${FILE} "
          done

          # Check if updates exist in parent repo before syncing
          if rsync -n -av --exclude '.git' --exclude 'config/' --exclude 'pre-commit.yaml' $RSYNC_EXCLUDES temp-clone/ ./ | grep -q '^'; then
            echo "Updates detected from cfa-repo-template-common repo."
          else
            echo "No updates detected from cfa-repo-template-common repo. Skipping sync."
            exit 0
          fi

          # Apply updates from parent repo
          rsync -av --exclude '.git' --exclude 'config/' --exclude 'pre-commit.yaml' temp-clone/ ./
          echo "✅ Keeping temp-clone directory until the workflow completes."

      - name: Detect Local Modifications Before Sync (excluding temp-clone/)
        run: |
          # Ensure temp-clone is ignored in git status
          echo "temp-clone" >> .gitignore
          echo "temp-clone/" >> .gitignore
          echo ".gitignore" >> .gitignore  # Ensure we don’t detect .gitignore itself
          git rm -r --cached temp-clone temp-clone/ .gitignore 2>/dev/null || true
          
          # Get local changes in child repo
          LOCAL_CHANGES=$(git diff --name-only HEAD)
      
          # Get modified files from parent repo
          PARENT_UPDATES=$(git diff --name-only origin/main)
      
          # Check for conflicts: files modified in both Parent & Child repos
          CONFLICTS=""
          for FILE in $LOCAL_CHANGES; do
            if [[ " $PARENT_UPDATES " == *" $FILE "* ]]; then
              CONFLICTS+="$FILE "
            fi
          done
      
          # Stop workflow if conflicts exist
          if [[ -n "$CONFLICTS" ]]; then
            echo "❌ Conflict detected! The following files have been modified in both Parent and Child repositories:"
            echo "⚠️ Conflicting files: $CONFLICTS"
            echo "🛑 Stopping workflow to prevent overwriting user changes. Please resolve conflicts manually."
            exit 1
          else
            echo "✅ No conflicts detected. Proceeding with sync."
          fi
      
          # Ensure temp-clone exists before running comparisons
          if [[ ! -d "temp-clone" ]]; then
            echo "⚠️ temp-clone directory does not exist. Cloning parent repo..."
            mkdir -p temp-clone
            git clone --depth=1 https://x-access-token:${{ secrets.PAT }}@github.com/cdcent/cfa-repo-template-common.git temp-clone
          else
            echo "✅ temp-clone directory already exists."
          fi
      
          # Compare only files that exist in both child and parent repos
          DIFF=""
          for FILE in $LOCAL_CHANGES; do
            # Extract only the filename to ensure correct comparison
            FILE_NAME=$(basename "$FILE")
            # Ensure the file exists in temp-clone before comparing
            if [[ -f "temp-clone/$FILE_NAME" ]]; then
              # Check if the actual file content is different
              if ! diff -q "$FILE" "temp-clone/$FILE_NAME" > /dev/null 2>&1; then
                DIFF+="$FILE "
              fi
            else
              DIFF+="$FILE "
            fi
          done
      
          # If there are real local modifications, stop the workflow
          if [[ -n "$DIFF" ]]; then
              echo "❌ Local changes detected in the child repository! Manual intervention required."
              echo "⚠️ Detected changes: $DIFF"
              exit 1
          else
              echo "✅ No conflicting local changes. Proceeding with sync."
          fi
                    
      - name: Pull Latest Updates From Common Template Repo
        run: |
          git fetch origin main
          if ! git merge --no-commit --no-ff origin/main; then
            echo "Merge conflict detected! Stopping workflow."
            git merge --abort
            exit 1
          fi

      - name: Detect and Merge Changes
        run: |
          git add -A
          if git diff --quiet HEAD -- && git diff --quiet; then
            echo "No real changes detected, skipping commit."
            exit 0
          else
            echo "Detected changes, proceeding with commit."
          fi

      - name: Run Pre-Commit Hooks and Stage Changes
        run: |
          echo "🚀 Running pre-commit hooks..."
          pre-commit run --all-files || true
          if git diff --exit-code; then
            echo "✅ No changes detected by pre-commit."
          else
            echo "🔄 Pre-commit modified files. Staging changes..."
            git add -A
          fi

      - name: Commit and Push Changes (Only if Necessary)
        run: |
          LAST_COMMITTER=$(git log -1 --pretty=format:'%an')
          LAST_COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          if [[ "$LAST_COMMIT_MSG" == *"Updated template version timestamp"* ]]; then
            echo "Skipping push to avoid workflow retriggering."
            exit 0
          fi
          if git diff --cached --quiet; then
            echo "✅ No real changes detected, skipping commit."
            exit 0
          else
            git commit -m "Sync with latest template-common updates"
            git push origin main || echo "No changes to push"
          fi

      - name: Store Version of Synced Template
        run: |
          # Ensure the repository has a commit history before running git diff
          if git rev-parse --is-inside-work-tree >/dev/null 2>&1 && git rev-parse HEAD^ >/dev/null 2>&1; then
            PARENT_UPDATES=$(git diff --name-only HEAD^ HEAD)
          else
            echo "⚠️ No previous commits found. Skipping parent update check."
            PARENT_UPDATES=""
          fi
          
          if [[ -n "$PARENT_UPDATES" ]]; then
            echo "Last updated: $(date)" > .template-version
            git add .template-version
            echo "🔄 Ensuring .template-version is updated due to parent updates."
          else
            echo "✅ No parent updates detected, but ensuring .template-version is checked."
          fi

          # Always attempt commit if .template-version is modified
          if git diff --cached --quiet; then
            echo "✅ No new changes detected, skipping commit."
            exit 0
          fi

          echo "🔄 Committing .template-version update..."
          git commit -m "Updated template version timestamp"
          git push origin main || echo "No changes to push"
         
      - name: Cleanup Temporary Files
        if: always()
        run: |
          echo "🧹 Cleaning up temporary files..."
          rm -rf temp-clone
