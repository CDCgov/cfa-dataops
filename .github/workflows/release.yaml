name: Build Release Distribution

on:
  push:
    tags:
      # below is same as ^\d{4}\.\d{2}\.\d{2}$ seems workflows use simpler regex
      - '[0-9][0-9][0-9][0-9].[0-9][0-9].[0-9][0-9].[0-9]+'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout release
        run: |
          git fetch origin adding_packaging
          git checkout adding_packaging

      - name: Determine Version
        id: get-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Determine If Tag Is From Release
        id: is-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_COMMIT=$(git rev-parse ${{ github.ref }})
          BRANCHES=$(git branch -r --contains "$TAG_COMMIT")

          if echo "$BRANCHES" | grep -q 'origin/adding_packaging'; then
            echo "should_continue=true" >> "$GITHUB_OUTPUT"
          else
            echo "Exiting Workflow: Tag is not from release branch"
            echo "IF intending to create a release from tag follow steps under 'Creating A Release' in the README file"
            echo "should_continue=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Python
        if: steps.is-release.outputs.should_continue == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        if: steps.is-release.outputs.should_continue == 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Install Dependencies
        if: steps.is-release.outputs.should_continue == 'true'
        run: |
          poetry install --no-root

      - name: Build Wheel
        if: steps.is-release.outputs.should_continue == 'true'
        run: |
          poetry build

      - name: Create Release
        if: steps.is-release.outputs.should_continue == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref }} dist/* --generate-notes --latest

      - name: Update pyproject.toml Version
        if: steps.is-release.outputs.should_continue == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get-version.outputs.version }}

          sed -i.bak -E "s/^version\s*=\s*\"[^\"]+\"/version = \"${VERSION}\"/" pyproject.toml

      - name: Update Change Log
        if: steps.is-release.outputs.should_continue == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          REPO_URL="https://github.com/${{ github.repository }}"
          RELEASE_URL="$REPO_URL/releases/tag/$VERSION"

          awk -v tag="## [$VERSION]" -v url="$RELEASE_URL" '
            !done && /---/ {
              print $0
              print ""
              print tag
              print url
              done = 1
              next
              }
              { print $0 }
            ' changelog.md > temp.md && mv temp.md changelog.md

      - name: Commit Change Log and pyproject.toml Updates
        if: steps.is-release.outputs.should_continue == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get-version.outputs.version }}

          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add pyproject.toml changelog.md
          git commit -m "Update Version to ${{ steps.get-version.outputs.version }}"
          git push origin adding_packaging
